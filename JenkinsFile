pipeline{
    agent any
    environment {
    TEST_RESULT_FILE = 'test_result.txt'
    REPO_URL = 'https://github.com/rainer-45/RainerLazaro_CCTBAssignment2DevOps2'
    TESTING_SERVER = '52.200.11.36'
    PRODUCTION_SERVER = '107.21.78.91'
    }

 stages{
        stage('Building'){
            steps{
                echo 'Building...'
                // Add build steps
                // sh sudo dnf install -y nodejs
	            // sh sudo dnf install -y npm
            }
        } 
        stage('Deploy to Testing'){
            steps{
                echo 'Deploying to testing server.....'
                sshagent(['ssh-key-id']) {
                    sh '''
                        ssh -o StrictHostKeyChecking=no ec2-user@$TESTING_SERVER "hostname && whoami"
                    '''
                }
            }
        } 
        stage('Selenium Testing'){
            steps{
              script{
                try{
                    //Install Selenium webdriver
                    sh 'npm install selenium-webdriver'

                    //Run the failed test and capture the output
                    def output = sh(script: 'node public/test/test1.js', returnStdout: true).trim()

                    //Debugging printing the output
                    echo "Test Output: ${output}"
                    
                    //Run the passed test and capture the output
                    output = sh(script: 'node public/test/test_validation.js', returnStdout: true).trim()

                    //Debugging printing the output
                    echo "Test Output: ${output}"

                    //Write the result to a file

                    if(output.contains('Test Passed')){
                        writeFile file: env.TEST_RESULT_FILE, text: 'true'
                    }else{
                        writeFile file: env.TEST_RESULT_FILE, text: 'false'
                    }
                }catch (Exception e) {
                    echo "Test failed: ${e.message}"
                    writeFile file: env.TEST_RESULT_FILE, text: 'false'
                }
            }
             }
        } 
        stage('Staging Environment'){
             when{
               expression {
                 // Read the test result from the file id true continue
                def testResult = readFile(env.TEST_RESULT_FILE).trim()
                return testResult == 'true'
                }           
             }
            steps{
             echo 'Staging...'
            }
        } 
        stage('Production Environment'){
             when{
               expression {
                 // Read the test result from the file id true continue
                def testResult = readFile(env.TEST_RESULT_FILE).trim()
                return testResult == 'true'
                }           
             }
            steps{
            echo 'Deploying to Production...'
            //sh 'ssh-keyscan -H 3.91.56.136 >> ~/.ssh/known_hosts'
            sh """

            ssh -i /var/lib/jenkins/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@$PRODUCTION_SERVER 'sudo dnf install -y git'
            
            ssh -i /var/lib/jenkins/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@$PRODUCTION_SERVER 'sudo rm -rf /var/www/html/*'

            ssh -i /var/lib/jenkins/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@$PRODUCTION_SERVER "sudo git clone $REPO_URL /var/www/html"
                        
            """
            }
        } 
    }

}